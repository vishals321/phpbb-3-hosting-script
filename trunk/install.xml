<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<?xml-stylesheet type="text/xsl" href="modx.prosilver.en.xsl"?>
<!--NOTICE: Please open this file in your web browser. If presented with a security warning, you may safely tell it to allow the blocked content.-->
<!--For security purposes, please check: http://www.phpbb.com/mods/ for the latest version of this MOD.\nAlthough MODs are checked before being allowed in the MODs Database there is no guarantee that there are no security problems within the MOD.\nNo support will be given for MODs not found within the MODs Database which can be found at http://www.phpbb.com/mods/-->
<mod xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.phpbb.com/mods/xml/modx-1.2.3.xsd">
	<header>
		<meta name="generator" content="MODX file generated with PP MODX Creator by tumba25 (online version)"/>
		<license><![CDATA[http://creativecommons.org/licenses/by-nd/3.0/de/]]></license>
		<title lang="en"><![CDATA[phpBB3 hosting script]]></title>
		<title lang="de"><![CDATA[phpBB3 Forenhosting Script]]></title>
		<description lang="en"><![CDATA[With this script, visitors can order a phpBB3 forum over a form, this forums will then be created by the php script. All forums use one phpBB installation, except the config / cache etc. these are created for each forum. Each forum has own tables, when you create several databases for those tables, the forums are splitted in the databases. The forums are always installed in the database which currently containing the fewest forums. The script also needs a couple of tables. To use the script, the server must have wildcard subdomains.]]></description>
		<description lang="de"><![CDATA[Mit diesem Script können Besucher per Formular ein Forum bestellen das dann per php angelegt wird.
Alle Foren verwenden die gleichen phpBB installations-Daten, außer die config/cache etc. werden für jedes Forum erstellt. Für jedes Forum werden die Tabellen einzelnd erstellt, wobei man mehre Datenbanken für diese Tabellen anlegen kann, dann werden die einzelnen Foren immer in die installiert, die derzeit die wenigsten Foren enthält. Das Script selber benötigt auch ein paar Tabellen, da in diesen die Einstellungen und Foren gespeichert werden. Um das Script zu benutzen müss der Server Wildcard-Subdomains unterstützen über die dann die Foren aufgerufen werden können.]]></description>
		<author-notes lang="en"><![CDATA[You need a full phpBB. You have to copy it into root/phpBB3]]></author-notes>
		<author-notes lang="de"><![CDATA[Du musst ein volles phpBB runterladen und es in den Ordner phpBB3 einfügen, erst dannach musst du die Datein wie hier beschrieben bearbeiten.]]></author-notes>
		<author-group>
			<author>
				<realname><![CDATA[Sebastian Ludwigs]]></realname>
				<username><![CDATA[Hexcode]]></username>
				<homepage><![CDATA[http://www.script-base.eu]]></homepage>
				<email><![CDATA[webmaster@script-base.eu]]></email>
			</author>
		</author-group>
		<mod-version>1.0.0</mod-version>
		<installation>
			<level>intermediate</level>
			<time>1800</time>
			<target-version>3.0.6</target-version>
		</installation>
		<history>
			<entry>
				<date>2010-01-09</date>
				<rev-version>0.0.1</rev-version>
				<changelog lang="en">
					<change><![CDATA[First release]]></change>
				</changelog>
				<changelog lang="de">
					<change><![CDATA[Erste Veröffentlichung]]></change>
				</changelog>
			</entry>
			<entry>
				<date>2010-01-11</date>
				<rev-version>0.0.2</rev-version>
				<changelog lang="en">
					<change><![CDATA[Fix some bugs]]></change>
					<change><![CDATA[Add update-module in ACP]]></change>
				</changelog>
				<changelog lang="de">
					<change><![CDATA[Fehler behoben]]></change>
					<change><![CDATA[Automatische Update-überprüfung im ACP hinzugefügt]]></change>
				</changelog>
			</entry>
			<entry>
				<date>2010-01-13</date>
				<rev-version>0.0.3</rev-version>
				<changelog lang="en">
					<change><![CDATA[Fix bug in ACP]]></change>
				</changelog>
				<changelog lang="de">
					<change><![CDATA[Fehler im ACP behoben]]></change>
				</changelog>
			</entry>
			<entry>
				<date>2010-01-09</date>
				<rev-version>1.0.0</rev-version>
				<changelog lang="en">
					<change><![CDATA[New template system (the one of phpBB 3.0.6)]]></change>
					<change><![CDATA[Neues Template System (modifiziert von phpBB 3.0.6)]]></change>
				</changelog>
			</entry>
		</history>
	</header>
	<action-group>
		<copy>
			<file from="root/*.*" to="*.*"/>
		</copy>
		<open src="phpBB3/config.php">
			<edit>
				<action type="after-add"><![CDATA[$root_path = &quot;.{$phpbb_root_path}&quot;;
$split = explode('.', $_SERVER['HTTP_HOST']);
if($split[0] == &quot;http://&quot; OR $split[0] == &quot;www&quot; OR $split[0]  == &quot;http://www&quot;)
{
	$subdomain = $split[1];
	$domain = $split[2].&quot;.&quot;.$split[3];
}
else {
	$subdomain = $split[0];
	$domain = $split[1].&quot;.&quot;.$split[2];
}
$subdomain = str_replace('-', '_', $subdomain);
$subdomain = mysql_escape_string($subdomain);
if(is_dir($phpbb_root_path.'/configs/') and is_file($phpbb_root_path.'/configs/'.$subdomain.'.php'))
{
	require_once($phpbb_root_path.'/configs/'.$subdomain.'.php');
}
else
{
	require_once($root_path.'/includes/config.php');
	require_once($root_path.'/includes/functions/database.php');
	$database = new database();
	$root_connection = $database-&gt;connect($host, $database_name, $user, $password);

	//Abfrage ob vorhanden oder nicht
	$sql = $database-&gt;query(&quot;SELECT COUNT(domain) as domain  FROM `hosting_forums` WHERE `domain` = '&quot;.$subdomain.&quot;';&quot;, $root_connection);
	$row = mysql_fetch_assoc($sql);
	$row_d = $row['domain'];
	
	$sql = $database-&gt;query(&quot;SELECT config_value FROM `hosting_config` WHERE `config_name` = 'site_title';&quot;, $root_connection);
	$row1 = mysql_fetch_assoc($sql);
	$main_domain = $row1['config_value'];
	if($row_d == 0)
	{
		header(&quot;Location: http://www.&quot;.$main_domain);
		exit;
	}
	//Rest
		$database_id = mysql_fetch_array($database-&gt;query(&quot;SELECT `database_id` FROM `hosting_forums` WHERE `domain` = '{$subdomain}';&quot;, $root_connection));	
		$database_info = mysql_fetch_array($database-&gt;query(&quot;SELECT * FROM `hosting_database` WHERE `database_id` = '{$database_id['database_id']}';&quot;, $root_connection));
		unset($database_id);

		// phpBB 3.0.x auto-generated configuration file
		// Do not change anything in this file!
		$dbms = &quot;mysql&quot;;
		$dbhost = &quot;{$database_info['server']}&quot;;
		$dbport = &quot;&quot;;
		$dbname = &quot;{$database_info['database']}&quot;;
		$dbuser = &quot;{$database_info['user']}&quot;;
		$dbpasswd = &quot;{$database_info['password']}&quot;;

		$table_prefix = &quot;{$subdomain}_&quot;;
		$acm_type = &quot;file&quot;;
		$load_extensions = &quot;&quot;;

		@define(&quot;PHPBB_INSTALLED&quot;, true);
		// @define(&quot;DEBUG&quot;, true);
		// @define(&quot;DEBUG_EXTRA&quot;, true);
		
		$content = '&lt;?php
		// phpBB 3.0.x auto-generated configuration file
		// Do not change anything in this file!
		$dbms = &quot;mysql&quot;;
		$dbhost = &quot;'.$database_info['server'].'&quot;;
		$dbport = &quot;&quot;;
		$dbname = &quot;'.$database_info['database'].'&quot;;
		$dbuser = &quot;'.$database_info['user'].'&quot;;
		$dbpasswd = &quot;'.$database_info['password'].'&quot;;

		$table_prefix = &quot;'.$subdomain.'_&quot;;
		$acm_type = &quot;file&quot;;
		$load_extensions = &quot;&quot;;

		@define(&quot;PHPBB_INSTALLED&quot;, true);
		// @define(&quot;DEBUG&quot;, true);
		// @define(&quot;DEBUG_EXTRA&quot;, true);
?&gt;';
		unset($database_info);
		file_put_contents('./configs/'.$subdomain.'.php', $content);
}]]></action>
			</edit>
		</open>
		<open src="phpBB3/includes/functions.php">
			<edit>
				<find><![CDATA[		$user_lang = substr($user_lang, 0, strpos($user_lang, '-x-'));
	}]]></find>
				<action type="after-add"><![CDATA[	// Datenbank Prefix auslesen 
	$split = explode('.', $_SERVER['HTTP_HOST']); 
	if($split[0] == &quot;http://&quot; OR $split[0] == &quot;www&quot; OR $split[0] == &quot;http://www&quot;){ $subdomain = $split[1];} 
	else { 
	$subdomain = $split[0]; 
		}
	$subdomain = str_replace('-', '_', $subdomain); ]]></action>
			</edit>
			<edit>
				<find><![CDATA[		'SITE_LOGO_IMG'			=&gt; $user-&gt;img('site_logo'),]]></find>
				<inline-edit>
					<inline-find><![CDATA[		'SITE_LOGO_IMG'			=&gt; ]]></inline-find>
					<inline-find><![CDATA[$user-]]></inline-find>
					<inline-find><![CDATA[&gt;]]></inline-find>
					<inline-find><![CDATA[img('site_logo')]]></inline-find>
					<inline-action type="replace-with"><![CDATA[&quot;&lt;img border=\&quot;0\&quot; src=\&quot;../images/logos/&quot;.$subdomain.&quot;.gif\&quot;]]></inline-action>
					<inline-action type="replace-with"><![CDATA[&quot;]]></inline-action>
				</inline-edit>
			</edit>
			<edit>
				<find><![CDATA[			$template-&gt;assign_var('RUN_CRON_TASK', '&lt;img src=&quot;' . append_sid($phpbb_root_path . 'cron.' . $phpEx, 'cron_type=' . $cron_type) . '&quot; width=&quot;1&quot; height=&quot;1&quot; alt=&quot;cron&quot; /&gt;');]]></find>
				<inline-edit>
					<inline-find><![CDATA[			$template-&gt;assign_var('RUN_CRON_TASK', '&lt;img src=&quot;' . append_sid($phpbb_root_path . 'cron.' . $phpEx, 'cron_type=' . $cron_type) . '&quot; width=&quot;1&quot; height=&quot;1&quot; alt=&quot;]]></inline-find>
					<inline-find><![CDATA[cron]]></inline-find>
					<inline-action type="replace-with"/>
				</inline-edit>
			</edit>
		</open>
		<open src="phpBB3/includes/acm/acm_file.php">
			<edit>
				<find><![CDATA[	function acm()
	{]]></find>
				<action type="after-add"><![CDATA[		$split = explode('.', $_SERVER['HTTP_HOST']); 
		if($split[0] == &quot;http://&quot; OR $split[0] == &quot;www&quot; OR $split[0] == &quot;http://www&quot;){ $subdomain = $split[1];} 
		else { 
		$subdomain = $split[0]; 
		} 
		$subdomain = str_replace('-', '_', $subdomain); ]]></action>
			</edit>
			<edit>
				<find><![CDATA[		$this-&gt;cache_dir = $phpbb_root_path . 'cache/';]]></find>
				<inline-edit>
					<inline-find><![CDATA[		$this-&gt;cache_dir = $phpbb_root_path . 'cache/']]></inline-find>
					<inline-action type="after-add"><![CDATA[.$subdomain.'/']]></inline-action>
				</inline-edit>
			</edit>
		</open>
		<open src="phpBB3/includes/acp/acp_attachments.php">
			<edit>
				<find><![CDATA[						'upload_path'			=&gt; array('lang' =&gt; 'UPLOAD_DIR',			'validate' =&gt; 'wpath',	'type' =&gt; 'text:25:100', 'explain' =&gt; true),]]></find>
				<inline-edit>
					<inline-find><![CDATA[						'upload_path'			=&gt; array('lang' =&gt; ]]></inline-find>
					<inline-find><![CDATA['UPLOAD_DIR']]></inline-find>
					<inline-find><![CDATA[,			'validate' =&gt; ]]></inline-find>
					<inline-find><![CDATA['wpath']]></inline-find>
					<inline-find><![CDATA[,	'type' =&gt; ]]></inline-find>
					<inline-find><![CDATA['text:25:100']]></inline-find>
					<inline-find><![CDATA[, 'explain' =&gt; ]]></inline-find>
					<inline-find><![CDATA[true]]></inline-find>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
				</inline-edit>
			</edit>
			<edit>
				<find><![CDATA[						'attachment_quota'		=&gt; array('lang' =&gt; 'ATTACH_QUOTA',			'validate' =&gt; 'string',	'type' =&gt; 'custom', 'method' =&gt; 'max_filesize', 'explain' =&gt; true),]]></find>
				<inline-edit>
					<inline-find><![CDATA[						'attachment_quota'		=&gt; array('lang' =&gt; ]]></inline-find>
					<inline-find><![CDATA['ATTACH_QUOTA']]></inline-find>
					<inline-find><![CDATA[,			'validate' =&gt; ]]></inline-find>
					<inline-find><![CDATA['string']]></inline-find>
					<inline-find><![CDATA[,	'type' =&gt; ]]></inline-find>
					<inline-find><![CDATA['custom']]></inline-find>
					<inline-find><![CDATA[, 'method' =&gt; ]]></inline-find>
					<inline-find><![CDATA['max_filesize']]></inline-find>
					<inline-find><![CDATA[, 'explain' =&gt; ]]></inline-find>
					<inline-find><![CDATA[true]]></inline-find>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
				</inline-edit>
			</edit>
		</open>
		<open src="phpBB3/includes/acp/acp_board.php">
			<edit>
				<find><![CDATA[						'avatar_filesize'		=&gt; array('lang' =&gt; 'MAX_FILESIZE',			'validate' =&gt; 'int:0',	'type' =&gt; 'text:4:10', 'explain' =&gt; true, 'append' =&gt; ' ' . $user-&gt;lang['BYTES']),]]></find>
				<inline-edit>
					<inline-find><![CDATA[						'avatar_filesize'		=&gt; array('lang' =&gt; ]]></inline-find>
					<inline-find><![CDATA['MAX_FILESIZE']]></inline-find>
					<inline-find><![CDATA[,			'validate' =&gt; ]]></inline-find>
					<inline-find><![CDATA['int:0']]></inline-find>
					<inline-find><![CDATA[,	'type' =&gt; ]]></inline-find>
					<inline-find><![CDATA['text:4:10']]></inline-find>
					<inline-find><![CDATA[, 'explain' =&gt; ]]></inline-find>
					<inline-find><![CDATA[true]]></inline-find>
					<inline-find><![CDATA[, 'append' =&gt; ]]></inline-find>
					<inline-find><![CDATA[' ' . $user-&gt;lang['BYTES']]]></inline-find>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
				</inline-edit>
			</edit>
			<edit>
				<find><![CDATA[						'avatar_path'			=&gt; array('lang' =&gt; 'AVATAR_STORAGE_PATH',	'validate' =&gt; 'rwpath',	'type' =&gt; 'text:20:255', 'explain' =&gt; true),]]></find>
				<inline-edit>
					<inline-find><![CDATA[						'avatar_path'			=&gt; array('lang' =&gt; ]]></inline-find>
					<inline-find><![CDATA['AVATAR_STORAGE_PATH']]></inline-find>
					<inline-find><![CDATA[,	'validate' =&gt; ]]></inline-find>
					<inline-find><![CDATA['rwpath']]></inline-find>
					<inline-find><![CDATA[,	'type' =&gt; ]]></inline-find>
					<inline-find><![CDATA['text:20:255']]></inline-find>
					<inline-find><![CDATA[, 'explain' =&gt; ]]></inline-find>
					<inline-find><![CDATA[true]]></inline-find>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
				</inline-edit>
			</edit>
			<edit>
				<find><![CDATA[						'avatar_gallery_path'	=&gt; array('lang' =&gt; 'AVATAR_GALLERY_PATH',	'validate' =&gt; 'rpath',	'type' =&gt; 'text:20:255', 'explain' =&gt; true)]]></find>
				<inline-edit>
					<inline-find><![CDATA[						'avatar_gallery_path'	=&gt; array('lang' =&gt; ]]></inline-find>
					<inline-find><![CDATA['AVATAR_GALLERY_PATH']]></inline-find>
					<inline-find><![CDATA[,	'validate' =&gt; ]]></inline-find>
					<inline-find><![CDATA['rpath']]></inline-find>
					<inline-find><![CDATA[,	'type' =&gt; ]]></inline-find>
					<inline-find><![CDATA['text:20:255']]></inline-find>
					<inline-find><![CDATA[, 'explain' =&gt; ]]></inline-find>
					<inline-find><![CDATA[true]]></inline-find>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
				</inline-edit>
			</edit>
			<edit>
				<find><![CDATA[						'limit_load'		=&gt; array('lang' =&gt; 'LIMIT_LOAD',		'validate' =&gt; 'string',	'type' =&gt; 'text:4:4', 'explain' =&gt; true),]]></find>
				<inline-edit>
					<inline-find><![CDATA[						'limit_load'		=&gt; array('lang' =&gt; ]]></inline-find>
					<inline-find><![CDATA['LIMIT_LOAD']]></inline-find>
					<inline-find><![CDATA[,		'validate' =&gt; ]]></inline-find>
					<inline-find><![CDATA['string']]></inline-find>
					<inline-find><![CDATA[,	'type' =&gt; ]]></inline-find>
					<inline-find><![CDATA['text:4:4']]></inline-find>
					<inline-find><![CDATA[, 'explain' =&gt; ]]></inline-find>
					<inline-find><![CDATA[true]]></inline-find>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
					<inline-action type="replace-with"><![CDATA[false]]></inline-action>
				</inline-edit>
			</edit>
		</open>
		<open src="phpBB3/includes/acp/acp_styles.php">
			<edit>
				<find><![CDATA[					return;
				}
			break;

			case 'export':
				if ($style_id)
				{
					$this-&gt;export($mode, $style_id);]]></find>
				<action type="replace-with"/>
			</edit>
			<edit>
				<find><![CDATA[			case 'cache':
				if ($style_id)
				{
					switch ($mode)
					{
						case 'template':
							return $this-&gt;template_cache($style_id);
					}
				}
			break;]]></find>
				<action type="replace-with"/>
			</edit>
			<edit>
				<find><![CDATA[				$this-&gt;frontend('style', array('details'), array('export', 'delete'));]]></find>
				<inline-edit>
					<inline-find><![CDATA[				$this-&gt;frontend('style', array('details'), array(']]></inline-find>
					<inline-find><![CDATA[export', ']]></inline-find>
					<inline-action type="replace-with"/>
				</inline-edit>
			</edit>
			<edit>
				<find><![CDATA[				$this-&gt;frontend('template', array('edit', 'cache', 'details'), array('refresh', 'export', 'delete'));]]></find>
				<inline-edit>
					<inline-find><![CDATA[				$this-&gt;frontend('template', array(']]></inline-find>
					<inline-find><![CDATA[edit', 'cache', ']]></inline-find>
					<inline-find><![CDATA[details'), array('refresh', ']]></inline-find>
					<inline-find><![CDATA[export', ']]></inline-find>
					<inline-action type="replace-with"/>
					<inline-action type="replace-with"/>
				</inline-edit>
			</edit>
			<edit>
				<find><![CDATA[				$this-&gt;frontend('theme', array('edit', 'details'), array('refresh', 'export', 'delete'));]]></find>
				<inline-edit>
					<inline-find><![CDATA[				$this-&gt;frontend('theme', array(']]></inline-find>
					<inline-find><![CDATA[edit', ']]></inline-find>
					<inline-find><![CDATA[details'), array('refresh', ']]></inline-find>
					<inline-find><![CDATA[export', ']]></inline-find>
					<inline-action type="replace-with"/>
					<inline-action type="replace-with"/>
				</inline-edit>
			</edit>
			<edit>
				<find><![CDATA[				$this-&gt;frontend('imageset', array('edit', 'details'), array('refresh', 'export', 'delete'));]]></find>
				<inline-edit>
					<inline-find><![CDATA[				$this-&gt;frontend('imageset', array(']]></inline-find>
					<inline-find><![CDATA[edit', ']]></inline-find>
					<inline-find><![CDATA[details'), array('refresh', ']]></inline-find>
					<inline-find><![CDATA[export', ']]></inline-find>
					<inline-action type="replace-with"/>
					<inline-action type="replace-with"/>
				</inline-edit>
			</edit>
			<edit>
				<find><![CDATA[	}

	/**
	* Provides a template editor which allows saving changes to template files on the filesystem or in the database.
	*
	* @param int $template_id specifies which template set is being edited
	*/
	function edit_template($template_id)
	{
		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template, $safe_mode;

		if (defined('PHPBB_DISABLE_ACP_EDITOR'))
		{
			trigger_error($user-&gt;lang['EDITOR_DISABLED'] . adm_back_link($this-&gt;u_action));
		}

		$this-&gt;page_title = 'EDIT_TEMPLATE';

		$filelist = $filelist_cats = array();

		$template_data	= utf8_normalize_nfc(request_var('template_data', '', true));
		$template_data	= htmlspecialchars_decode($template_data);
		$template_file	= utf8_normalize_nfc(request_var('template_file', '', true));
		$text_rows		= max(5, min(999, request_var('text_rows', 20)));
		$save_changes	= (isset($_POST['save'])) ? true : false;

		// make sure template_file path doesn't go upwards
		$template_file = str_replace('..', '.', $template_file);

		// Retrieve some information about the template
		$sql = 'SELECT template_storedb, template_path, template_name
			FROM ' . STYLES_TEMPLATE_TABLE . &quot;
			WHERE template_id = $template_id&quot;;
		$result = $db-&gt;sql_query($sql);
		$template_info = $db-&gt;sql_fetchrow($result);
		$db-&gt;sql_freeresult($result);

		if (!$template_info)
		{
			trigger_error($user-&gt;lang['NO_TEMPLATE'] . adm_back_link($this-&gt;u_action), E_USER_WARNING);
		}

		if ($save_changes &amp;&amp; !check_form_key('acp_styles'))
		{
			trigger_error($user-&gt;lang['FORM_INVALID'] . adm_back_link($this-&gt;u_action), E_USER_WARNING);
		}
		else if (!$save_changes)
		{
			add_form_key('acp_styles');
		}

		// save changes to the template if the user submitted any
		if ($save_changes &amp;&amp; $template_file)
		{
			// Get the filesystem location of the current file
			$file = &quot;{$phpbb_root_path}styles/{$template_info['template_path']}/template/$template_file&quot;;
			$additional = '';

			// If the template is stored on the filesystem try to write the file else store it in the database
			if (!$safe_mode &amp;&amp; !$template_info['template_storedb'] &amp;&amp; file_exists($file) &amp;&amp; @is_writable($file))
			{
				if (!($fp = @fopen($file, 'wb')))
				{
					// File exists and is writeable, but still not able to be written to
					trigger_error(sprintf($user-&gt;lang['TEMPLATE_FILE_NOT_WRITABLE'], htmlspecialchars($template_file)) . adm_back_link($this-&gt;u_action), E_USER_WARNING);
				}
				fwrite($fp, $template_data);
				fclose($fp);
			}
			else
			{
				$db-&gt;sql_transaction('begin');

				// If it's not stored in the db yet, then update the template setting and store all template files in the db
				if (!$template_info['template_storedb'])
				{
					if ($super = $this-&gt;get_super('template', $template_id))
					{
						$this-&gt;store_in_db('template', $super['template_id']);
					}
					else
					{
						$this-&gt;store_in_db('template', $template_id);
					}

					add_log('admin', 'LOG_TEMPLATE_EDIT_DETAILS', $template_info['template_name']);
					$additional .= '&lt;br /&gt;' . $user-&gt;lang['EDIT_TEMPLATE_STORED_DB'];
				}

				// Update the template_data table entry for this template file
				$sql = 'UPDATE ' . STYLES_TEMPLATE_DATA_TABLE . &quot;
					SET template_data = '&quot; . $db-&gt;sql_escape($template_data) . &quot;', template_mtime = &quot; . time() . &quot;
					WHERE template_id = $template_id
						AND template_filename = '&quot; . $db-&gt;sql_escape($template_file) . &quot;'&quot;;
				$db-&gt;sql_query($sql);

				$db-&gt;sql_transaction('commit');
			}

			// destroy the cached version of the template (filename without extension)
			$this-&gt;clear_template_cache($template_info, array(substr($template_file, 0, -5)));

			$cache-&gt;destroy('sql', STYLES_TABLE);

			add_log('admin', 'LOG_TEMPLATE_EDIT', $template_info['template_name'], $template_file);
			trigger_error($user-&gt;lang['TEMPLATE_FILE_UPDATED'] . $additional . adm_back_link($this-&gt;u_action . &quot;&amp;amp;action=edit&amp;amp;id=$template_id&amp;amp;text_rows=$text_rows&amp;amp;template_file=$template_file&quot;));
		}

		// Generate a category array containing template filenames
		if (!$template_info['template_storedb'])
		{
			$template_path = &quot;{$phpbb_root_path}styles/{$template_info['template_path']}/template&quot;;

			$filelist = filelist($template_path, '', 'html');
			$filelist[''] = array_diff($filelist[''], array('bbcode.html'));

			if ($template_file)
			{
				if (!file_exists($template_path . &quot;/$template_file&quot;) || !($template_data = file_get_contents($template_path . &quot;/$template_file&quot;)))
				{
					trigger_error($user-&gt;lang['NO_TEMPLATE'] . adm_back_link($this-&gt;u_action), E_USER_WARNING);
				}
			}
		}
		else
		{
			$sql = 'SELECT *
				FROM ' . STYLES_TEMPLATE_DATA_TABLE . &quot;
				WHERE template_id = $template_id&quot;;
			$result = $db-&gt;sql_query($sql);

			$filelist = array('' =&gt; array());
			while ($row = $db-&gt;sql_fetchrow($result))
			{
				$file_info = pathinfo($row['template_filename']);

				if (($file_info['basename'] != 'bbcode') &amp;&amp; ($file_info['extension'] == 'html'))
				{
					if (($file_info['dirname'] == '.') || empty($file_info['dirname']))
					{
						$filelist[''][] = $row['template_filename'];
					}
					else
					{
						$filelist[$file_info['dirname'] . '/'][] = $file_info['basename'];
					}
				}

				if ($row['template_filename'] == $template_file)
				{
					$template_data = $row['template_data'];
				}
			}
			$db-&gt;sql_freeresult($result);
			unset($file_info);
		}

		if (empty($filelist['']))
		{
			trigger_error($user-&gt;lang['NO_TEMPLATE'] . adm_back_link($this-&gt;u_action), E_USER_WARNING);
		}

		// Now create the categories
		$filelist_cats[''] = array();
		foreach ($filelist as $pathfile =&gt; $file_ary)
		{
			// Use the directory name as category name
			if (!empty($pathfile))
			{
				$filelist_cats[$pathfile] = array();
				foreach ($file_ary as $file)
				{
					$filelist_cats[$pathfile][$pathfile . $file] = $file;
				}
			}
			// or if it's in the main category use the word before the first underscore to group files
			else
			{
				$cats = array();
				foreach ($file_ary as $file)
				{
					$cats[] = substr($file, 0, strpos($file, '_'));
					$filelist_cats[substr($file, 0, strpos($file, '_'))][$file] = $file;
				}

				$cats = array_values(array_unique($cats));

				// we don't need any single element categories so put them into the misc '' category
				for ($i = 0, $n = sizeof($cats); $i &lt; $n; $i++)
				{
					if (sizeof($filelist_cats[$cats[$i]]) == 1 &amp;&amp; $cats[$i] !== '')
					{
						$filelist_cats[''][key($filelist_cats[$cats[$i]])] = current($filelist_cats[$cats[$i]]);
						unset($filelist_cats[$cats[$i]]);
					}
				}
				unset($cats);
			}
		}
		unset($filelist);

		// Generate list of categorised template files
		$tpl_options = '';
		ksort($filelist_cats);
		foreach ($filelist_cats as $category =&gt; $tpl_ary)
		{
			ksort($tpl_ary);

			if (!empty($category))
			{
				$tpl_options .= '&lt;option class=&quot;sep&quot; value=&quot;&quot;&gt;' . $category . '&lt;/option&gt;';
			}

			foreach ($tpl_ary as $filename =&gt; $file)
			{
				$selected = ($template_file == $filename) ? ' selected=&quot;selected&quot;' : '';
				$tpl_options .= '&lt;option value=&quot;' . $filename . '&quot;' . $selected . '&gt;' . $file . '&lt;/option&gt;';
			}
		}

		$template-&gt;assign_vars(array(
			'S_EDIT_TEMPLATE'	=&gt; true,
			'S_HIDDEN_FIELDS'	=&gt; build_hidden_fields(array('template_file' =&gt; $template_file)),
			'S_TEMPLATES'		=&gt; $tpl_options,

			'U_ACTION'			=&gt; $this-&gt;u_action . &quot;&amp;amp;action=edit&amp;amp;id=$template_id&amp;amp;text_rows=$text_rows&quot;,
			'U_BACK'			=&gt; $this-&gt;u_action,

			'L_EDIT'			=&gt; $user-&gt;lang['EDIT_TEMPLATE'],
			'L_EDIT_EXPLAIN'	=&gt; $user-&gt;lang['EDIT_TEMPLATE_EXPLAIN'],
			'L_EDITOR'			=&gt; $user-&gt;lang['TEMPLATE_EDITOR'],
			'L_EDITOR_HEIGHT'	=&gt; $user-&gt;lang['TEMPLATE_EDITOR_HEIGHT'],
			'L_FILE'			=&gt; $user-&gt;lang['TEMPLATE_FILE'],
			'L_SELECT'			=&gt; $user-&gt;lang['SELECT_TEMPLATE'],
			'L_SELECTED'		=&gt; $user-&gt;lang['SELECTED_TEMPLATE'],
			'L_SELECTED_FILE'	=&gt; $user-&gt;lang['SELECTED_TEMPLATE_FILE'],

			'SELECTED_TEMPLATE'	=&gt; $template_info['template_name'],
			'TEMPLATE_FILE'		=&gt; $template_file,
			'TEMPLATE_DATA'		=&gt; utf8_htmlspecialchars($template_data),
			'TEXT_ROWS'			=&gt; $text_rows)
		);
	}

	/**
	* Allows the admin to view cached versions of template files and clear single template cache files
	*
	* @param int $template_id specifies which template's cache is shown
	*/
	function template_cache($template_id)
	{
		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template;

		$source		= str_replace('/', '.', request_var('source', ''));
		$file_ary	= array_diff(request_var('delete', array('')), array(''));
		$submit		= isset($_POST['submit']) ? true : false;

		$sql = 'SELECT *
			FROM ' . STYLES_TEMPLATE_TABLE . &quot;
			WHERE template_id = $template_id&quot;;
		$result = $db-&gt;sql_query($sql);
		$template_row = $db-&gt;sql_fetchrow($result);
		$db-&gt;sql_freeresult($result);

		if (!$template_row)
		{
			trigger_error($user-&gt;lang['NO_TEMPLATE'] . adm_back_link($this-&gt;u_action), E_USER_WARNING);
		}

		// User wants to delete one or more files ...
		if ($submit &amp;&amp; $file_ary)
		{
			$this-&gt;clear_template_cache($template_row, $file_ary);
			trigger_error($user-&gt;lang['TEMPLATE_CACHE_CLEARED'] . adm_back_link($this-&gt;u_action . &quot;&amp;amp;action=cache&amp;amp;id=$template_id&quot;));
		}

		$cache_prefix = 'tpl_' . str_replace('_', '-', $template_row['template_path']);

		// Someone wants to see the cached source ... so we'll highlight it,
		// add line numbers and indent it appropriately. This could be nasty
		// on larger source files ...
		if ($source &amp;&amp; file_exists(&quot;{$phpbb_root_path}cache/{$cache_prefix}_$source.html.$phpEx&quot;))
		{
			adm_page_header($user-&gt;lang['TEMPLATE_CACHE']);

			$template-&gt;set_filenames(array(
				'body'	=&gt; 'viewsource.html')
			);

			$template-&gt;assign_vars(array(
				'FILENAME'	=&gt; str_replace('.', '/', $source) . '.html')
			);

			$code = str_replace(array(&quot;\r\n&quot;, &quot;\r&quot;), array(&quot;\n&quot;, &quot;\n&quot;), file_get_contents(&quot;{$phpbb_root_path}cache/{$cache_prefix}_$source.html.$phpEx&quot;));

			$conf = array('highlight.bg', 'highlight.comment', 'highlight.default', 'highlight.html', 'highlight.keyword', 'highlight.string');
			foreach ($conf as $ini_var)
			{
				@ini_set($ini_var, str_replace('highlight.', 'syntax', $ini_var));
			}

			$marker = 'MARKER' . time();
			$code = highlight_string(str_replace(&quot;\n&quot;, $marker, $code), true);
			$code = str_replace($marker, &quot;\n&quot;, $code);
			$str_from = array('&lt;span style=&quot;color: ', '&lt;font color=&quot;syntax', '&lt;/font&gt;', '&lt;code&gt;', '&lt;/code&gt;','[', ']', '.', ':');
			$str_to = array('&lt;span class=&quot;', '&lt;span class=&quot;syntax', '&lt;/span&gt;', '', '', '&amp;#91;', '&amp;#93;', '&amp;#46;', '&amp;#58;');

			$code = str_replace($str_from, $str_to, $code);
			$code = preg_replace('#^(&lt;span class=&quot;[a-z_]+&quot;&gt;)\n?(.*?)\n?(&lt;/span&gt;)$#ism', '$1$2$3', $code);
			$code = substr($code, strlen('&lt;span class=&quot;syntaxhtml&quot;&gt;'));
			$code = substr($code, 0, -1 * strlen('&lt;/ span&gt;'));
			$code = explode(&quot;\n&quot;, $code);

			foreach ($code as $key =&gt; $line)
			{
				$template-&gt;assign_block_vars('source', array(
					'LINENUM'	=&gt; $key + 1,
					'LINE'		=&gt; preg_replace('#([^ ;])&amp;nbsp;([^ &amp;])#', '$1 $2', $line))
				);
				unset($code[$key]);
			}

			adm_page_footer();
		}

		$filemtime = array();
		if ($template_row['template_storedb'])
		{
			$ids = array();
			if (isset($template_row['template_inherits_id']) &amp;&amp; $template_row['template_inherits_id'])
			{
				$ids[] = $template_row['template_inherits_id'];
			}
			$ids[] = $template_row['template_id'];

			$filemtime 			= array();
			$file_template_db	= array();

			foreach ($ids as $id)
			{
				$sql = 'SELECT template_filename, template_mtime
					FROM ' . STYLES_TEMPLATE_DATA_TABLE . &quot;
					WHERE template_id = $id&quot;;
				$result = $db-&gt;sql_query($sql);

				while ($row = $db-&gt;sql_fetchrow($result))
				{
					$filemtime[$row['template_filename']] = $row['template_mtime'];
					$file_template_db[$row['template_filename']] = $id;
				}
				$db-&gt;sql_freeresult($result);
			}
		}

		// Get a list of cached template files and then retrieve additional information about them
		$file_ary = $this-&gt;template_cache_filelist($template_row['template_path']);

		foreach ($file_ary as $file)
		{
			$file		= str_replace('/', '.', $file);

			// perform some dirty guessing to get the path right.
			// We assume that three dots in a row were '../'
			$tpl_file	= str_replace('.', '/', $file);
			$tpl_file	= str_replace('///', '../', $tpl_file);

			$filename = &quot;{$cache_prefix}_$file.html.$phpEx&quot;;

			if (!file_exists(&quot;{$phpbb_root_path}cache/$filename&quot;))
			{
				continue;
			}

			$file_tpl = &quot;{$phpbb_root_path}styles/{$template_row['template_path']}/template/$tpl_file.html&quot;;
			$inherited = false;

			if (isset($template_row['template_inherits_id']) &amp;&amp; $template_row['template_inherits_id'])
			{
				if (!$template_row['template_storedb'])
				{
					if (!file_exists($file_tpl))
					{
						$file_tpl = &quot;{$phpbb_root_path}styles/{$template_row['template_inherit_path']}/template/$tpl_file.html&quot;;
						$inherited = true;
					}
				}
				else
				{
					if ($file_template_db[$file . '.html'] == $template_row['template_inherits_id'])
					{
						$file_tpl = &quot;{$phpbb_root_path}styles/{$template_row['template_inherit_path']}/template/$tpl_file.html&quot;;
						$inherited = true;
					}
				}
			}

			// Correct the filename if it is stored in database and the file is in a subfolder.
			if ($template_row['template_storedb'])
			{
				$file = str_replace('.', '/', $file);
			}

			$template-&gt;assign_block_vars('file', array(
				'U_VIEWSOURCE'	=&gt; $this-&gt;u_action . &quot;&amp;amp;action=cache&amp;amp;id=$template_id&amp;amp;source=$file&quot;,

				'CACHED'		=&gt; $user-&gt;format_date(filemtime(&quot;{$phpbb_root_path}cache/$filename&quot;)),
				'FILENAME'		=&gt; $file,
				'FILENAME_PATH'	=&gt; $file_tpl,
				'FILESIZE'		=&gt; get_formatted_filesize(filesize(&quot;{$phpbb_root_path}cache/$filename&quot;)),
				'MODIFIED'		=&gt; $user-&gt;format_date((!$template_row['template_storedb']) ? filemtime($file_tpl) : $filemtime[$file . '.html']))
			);
		}
		unset($filemtime);

		$template-&gt;assign_vars(array(
			'S_CACHE'			=&gt; true,
			'S_TEMPLATE'		=&gt; true,

			'U_ACTION'			=&gt; $this-&gt;u_action . &quot;&amp;amp;action=cache&amp;amp;id=$template_id&quot;,
			'U_BACK'			=&gt; $this-&gt;u_action)
		);
	}

	/**
	* Provides a css editor and a basic easier to use stylesheet editing tool for less experienced (or lazy) users
	*
	* @param int $theme_id specifies which theme is being edited
	*/
	function edit_theme($theme_id)
	{
		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template, $safe_mode;

		$this-&gt;page_title = 'EDIT_THEME';

		$filelist = $filelist_cats = array();

		$theme_data		= utf8_normalize_nfc(request_var('template_data', '', true));
		$theme_data		= htmlspecialchars_decode($theme_data);
		$theme_file		= utf8_normalize_nfc(request_var('template_file', '', true));
		$text_rows		= max(5, min(999, request_var('text_rows', 20)));
		$save_changes	= (isset($_POST['save'])) ? true : false;

		// make sure theme_file path doesn't go upwards
		$theme_file = str_replace('..', '.', $theme_file);

		// Retrieve some information about the theme
		$sql = 'SELECT theme_storedb, theme_path, theme_name, theme_data
			FROM ' . STYLES_THEME_TABLE . &quot;
			WHERE theme_id = $theme_id&quot;;
		$result = $db-&gt;sql_query($sql);

		if (!($theme_info = $db-&gt;sql_fetchrow($result)))
		{
			trigger_error($user-&gt;lang['NO_THEME'] . adm_back_link($this-&gt;u_action), E_USER_WARNING);
		}
		$db-&gt;sql_freeresult($result);

		// save changes to the theme if the user submitted any
		if ($save_changes)
		{
			// Get the filesystem location of the current file
			$file = &quot;{$phpbb_root_path}styles/{$theme_info['theme_path']}/theme/$theme_file&quot;;
			$additional = '';
			$message = $user-&gt;lang['THEME_UPDATED'];

			// If the theme is stored on the filesystem try to write the file else store it in the database
			if (!$safe_mode &amp;&amp; !$theme_info['theme_storedb'] &amp;&amp; file_exists($file) &amp;&amp; @is_writable($file))
			{
				if (!($fp = @fopen($file, 'wb')))
				{
					trigger_error($user-&gt;lang['NO_THEME'] . adm_back_link($this-&gt;u_action), E_USER_WARNING);
				}
				fwrite($fp, $theme_data);
				fclose($fp);
			}
			else
			{
				// Write stylesheet to db
				$sql_ary = array(
					'theme_mtime'		=&gt; time(),
					'theme_storedb'		=&gt; 1,
					'theme_data'		=&gt; $this-&gt;db_theme_data($theme_info, $theme_data),
				);
				$sql = 'UPDATE ' . STYLES_THEME_TABLE . '
					SET ' . $db-&gt;sql_build_array('UPDATE', $sql_ary) . '
					WHERE theme_id = ' . $theme_id;
				$db-&gt;sql_query($sql);

				$cache-&gt;destroy('sql', STYLES_THEME_TABLE);

				// notify the user if the theme was not stored in the db before his modification
				if (!$theme_info['theme_storedb'])
				{
					add_log('admin', 'LOG_THEME_EDIT_DETAILS', $theme_info['theme_name']);
					$message .= '&lt;br /&gt;' . $user-&gt;lang['EDIT_THEME_STORED_DB'];
				}
			}
			$cache-&gt;destroy('sql', STYLES_THEME_TABLE);
			add_log('admin', (!$theme_info['theme_storedb']) ? 'LOG_THEME_EDIT_FILE' : 'LOG_THEME_EDIT', $theme_info['theme_name'], (!$theme_info['theme_storedb']) ? $theme_file : '');

			trigger_error($message . adm_back_link($this-&gt;u_action . &quot;&amp;amp;action=edit&amp;amp;id=$theme_id&amp;amp;template_file=$theme_file&amp;amp;text_rows=$text_rows&quot;));
		}

		// Generate a category array containing theme filenames
		if (!$theme_info['theme_storedb'])
		{
			$theme_path = &quot;{$phpbb_root_path}styles/{$theme_info['theme_path']}/theme&quot;;

			$filelist = filelist($theme_path, '', 'css');

			if ($theme_file)
			{
				if (!file_exists($theme_path . &quot;/$theme_file&quot;) || !($theme_data = file_get_contents($theme_path . &quot;/$theme_file&quot;)))
				{
					trigger_error($user-&gt;lang['NO_THEME'] . adm_back_link($this-&gt;u_action), E_USER_WARNING);
				}
			}
		}
		else
		{
			$theme_data = &amp;$theme_info['theme_data'];
		}

		// Now create the categories
		$filelist_cats[''] = array();
		foreach ($filelist as $pathfile =&gt; $file_ary)
		{
			// Use the directory name as category name
			if (!empty($pathfile))
			{
				$filelist_cats[$pathfile] = array();
				foreach ($file_ary as $file)
				{
					$filelist_cats[$pathfile][$pathfile . $file] = $file;
				}
			}
			// or if it's in the main category use the word before the first underscore to group files
			else
			{
				$cats = array();
				foreach ($file_ary as $file)
				{
					$cats[] = substr($file, 0, strpos($file, '_'));
					$filelist_cats[substr($file, 0, strpos($file, '_'))][$file] = $file;
				}

				$cats = array_values(array_unique($cats));

				// we don't need any single element categories so put them into the misc '' category
				for ($i = 0, $n = sizeof($cats); $i &lt; $n; $i++)
				{
					if (sizeof($filelist_cats[$cats[$i]]) == 1 &amp;&amp; $cats[$i] !== '')
					{
						$filelist_cats[''][key($filelist_cats[$cats[$i]])] = current($filelist_cats[$cats[$i]]);
						unset($filelist_cats[$cats[$i]]);
					}
				}
				unset($cats);
			}
		}
		unset($filelist);

		// Generate list of categorised theme files
		$tpl_options = '';
		ksort($filelist_cats);
		foreach ($filelist_cats as $category =&gt; $tpl_ary)
		{
			ksort($tpl_ary);

			if (!empty($category))
			{
				$tpl_options .= '&lt;option class=&quot;sep&quot; value=&quot;&quot;&gt;' . $category . '&lt;/option&gt;';
			}

			foreach ($tpl_ary as $filename =&gt; $file)
			{
				$selected = ($theme_file == $filename) ? ' selected=&quot;selected&quot;' : '';
				$tpl_options .= '&lt;option value=&quot;' . $filename . '&quot;' . $selected . '&gt;' . $file . '&lt;/option&gt;';
			}
		}

		$template-&gt;assign_vars(array(
			'S_EDIT_THEME'		=&gt; true,
			'S_HIDDEN_FIELDS'	=&gt; build_hidden_fields(array('template_file' =&gt; $theme_file)),
			'S_THEME_IN_DB'		=&gt; $theme_info['theme_storedb'],
			'S_TEMPLATES'		=&gt; $tpl_options,

			'U_ACTION'			=&gt; $this-&gt;u_action . &quot;&amp;amp;action=edit&amp;amp;id=$theme_id&amp;amp;text_rows=$text_rows&quot;,
			'U_BACK'			=&gt; $this-&gt;u_action,

			'L_EDIT'			=&gt; $user-&gt;lang['EDIT_THEME'],
			'L_EDIT_EXPLAIN'	=&gt; $user-&gt;lang['EDIT_THEME_EXPLAIN'],
			'L_EDITOR'			=&gt; $user-&gt;lang['THEME_EDITOR'],
			'L_EDITOR_HEIGHT'	=&gt; $user-&gt;lang['THEME_EDITOR_HEIGHT'],
			'L_FILE'			=&gt; $user-&gt;lang['THEME_FILE'],
			'L_SELECT'			=&gt; $user-&gt;lang['SELECT_THEME'],
			'L_SELECTED'		=&gt; $user-&gt;lang['SELECTED_THEME'],
			'L_SELECTED_FILE'	=&gt; $user-&gt;lang['SELECTED_THEME_FILE'],

			'SELECTED_TEMPLATE'	=&gt; $theme_info['theme_name'],
			'TEMPLATE_FILE'		=&gt; $theme_file,
			'TEMPLATE_DATA'		=&gt; utf8_htmlspecialchars($theme_data),
			'TEXT_ROWS'			=&gt; $text_rows)
		);
	}

	/**
	* Edit imagesets
	*
	* @param int $imageset_id specifies which imageset is being edited
	*/
	function edit_imageset($imageset_id)
	{
		global $db, $user, $phpbb_root_path, $cache, $template;

		$this-&gt;page_title = 'EDIT_IMAGESET';

		if (!$imageset_id)
		{
			trigger_error($user-&gt;lang['NO_IMAGESET'] . adm_back_link($this-&gt;u_action), E_USER_WARNING);
		}

		$update		= (isset($_POST['update'])) ? true : false;

		$imgname	= request_var('imgname', 'site_logo');
		$imgname	= preg_replace('#[^a-z0-9\-+_]#i', '', $imgname);
		$sql_extra = $imgnamelang = '';

		$sql = 'SELECT imageset_path, imageset_name
			FROM ' . STYLES_IMAGESET_TABLE . &quot;
			WHERE imageset_id = $imageset_id&quot;;
		$result = $db-&gt;sql_query($sql);
		$imageset_row = $db-&gt;sql_fetchrow($result);
		$db-&gt;sql_freeresult($result);

		if (!$imageset_row)
		{
			trigger_error($user-&gt;lang['NO_IMAGESET'] . adm_back_link($this-&gt;u_action), E_USER_WARNING);
		}

		$imageset_path		= $imageset_row['imageset_path'];
		$imageset_name		= $imageset_row['imageset_name'];

		if (strpos($imgname, '-') !== false)
		{
			list($imgname, $imgnamelang) = explode('-', $imgname);
			$sql_extra = &quot; AND image_lang IN ('&quot; . $db-&gt;sql_escape($imgnamelang) . &quot;', '')&quot;;
		}

		$sql = 'SELECT image_filename, image_width, image_height, image_lang, image_id
			FROM ' . STYLES_IMAGESET_DATA_TABLE . &quot;
			WHERE imageset_id = $imageset_id
				AND image_name = '&quot; . $db-&gt;sql_escape($imgname) . &quot;'$sql_extra&quot;;
		$result = $db-&gt;sql_query($sql);
		$imageset_data_row = $db-&gt;sql_fetchrow($result);
		$db-&gt;sql_freeresult($result);

		$image_filename	= $imageset_data_row['image_filename'];
		$image_width	= $imageset_data_row['image_width'];
		$image_height	= $imageset_data_row['image_height'];
		$image_lang		= $imageset_data_row['image_lang'];
		$image_id		= $imageset_data_row['image_id'];
		$imgsize		= ($imageset_data_row['image_width'] &amp;&amp; $imageset_data_row['image_height']) ? 1 : 0;

		// Check to see whether the selected image exists in the table
		$valid_name = ($update) ? false : true;

		foreach ($this-&gt;imageset_keys as $category =&gt; $img_ary)
		{
			if (in_array($imgname, $img_ary))
			{
				$valid_name = true;
				break;
			}
		}

		if ($update &amp;&amp; isset($_POST['imgpath']) &amp;&amp; $valid_name)
		{
			// If imgwidth and imgheight are non-zero grab the actual size
			// from the image itself ... we ignore width settings for the poll center image
			$imgwidth	= request_var('imgwidth', 0);
			$imgheight	= request_var('imgheight', 0);
			$imgsize	= request_var('imgsize', 0);
			$imgpath	= request_var('imgpath', '');
			$imgpath	= str_replace('..', '.', $imgpath);

			// If no dimensions selected, we reset width and height to 0 ;)
			if (!$imgsize)
			{
				$imgwidth = $imgheight = 0;
			}

			$imglang = '';

			if ($imgpath &amp;&amp; !file_exists(&quot;{$phpbb_root_path}styles/$imageset_path/imageset/$imgpath&quot;))
			{
				trigger_error($user-&gt;lang['NO_IMAGE_ERROR'] . adm_back_link($this-&gt;u_action), E_USER_WARNING);
			}

			// Determine width/height. If dimensions included and no width/height given, we detect them automatically...
			if ($imgsize &amp;&amp; $imgpath)
			{
				if (!$imgwidth || !$imgheight)
				{
					list($imgwidth_file, $imgheight_file) = getimagesize(&quot;{$phpbb_root_path}styles/$imageset_path/imageset/$imgpath&quot;);
					$imgwidth = ($imgwidth) ? $imgwidth : $imgwidth_file;
					$imgheight = ($imgheight) ? $imgheight : $imgheight_file;
				}
				$imgwidth	= ($imgname != 'poll_center') ? (int) $imgwidth : 0;
				$imgheight	= (int) $imgheight;
			}

			if (strpos($imgpath, '/') !== false)
			{
				list($imglang, $imgfilename) = explode('/', $imgpath);
			}
			else
			{
				$imgfilename = $imgpath;
			}

			$sql_ary = array(
				'image_filename'	=&gt; (string) $imgfilename,
				'image_width'		=&gt; (int) $imgwidth,
				'image_height'		=&gt; (int) $imgheight,
				'image_lang'		=&gt; (string) $imglang,
			);

			// already exists
			if ($imageset_data_row)
			{
				$sql = 'UPDATE ' . STYLES_IMAGESET_DATA_TABLE . '
					SET ' . $db-&gt;sql_build_array('UPDATE', $sql_ary) . &quot;
					WHERE image_id = $image_id&quot;;
				$db-&gt;sql_query($sql);
			}
			// does not exist
			else if (!$imageset_data_row)
			{
				$sql_ary['image_name']	= $imgname;
				$sql_ary['imageset_id']	= (int) $imageset_id;
				$db-&gt;sql_query('INSERT INTO ' . STYLES_IMAGESET_DATA_TABLE . ' ' . $db-&gt;sql_build_array('INSERT', $sql_ary));
			}

			$cache-&gt;destroy('sql', STYLES_IMAGESET_DATA_TABLE);

			add_log('admin', 'LOG_IMAGESET_EDIT', $imageset_name);

			$template-&gt;assign_var('SUCCESS', true);

			$image_filename = $imgfilename;
			$image_width	= $imgwidth;
			$image_height	= $imgheight;
			$image_lang		= $imglang;
		}

		$imglang = '';
		$imagesetlist = array('nolang' =&gt; array(), 'lang' =&gt; array());
		$langs = array();

		$dir = &quot;{$phpbb_root_path}styles/$imageset_path/imageset&quot;;
		$dp = @opendir($dir);

		if ($dp)
		{
			while (($file = readdir($dp)) !== false)
			{
				if ($file[0] != '.' &amp;&amp; strtoupper($file) != 'CVS' &amp;&amp; !is_file($dir . '/' . $file) &amp;&amp; !is_link($dir . '/' . $file))
				{
					$langs[] = $file;
				}
				else if (preg_match('#\.(?:gif|jpg|png)$#', $file))
				{
					$imagesetlist['nolang'][] = $file;
				}
			}

			if ($sql_extra)
			{
				$dp2 = @opendir(&quot;$dir/$imgnamelang&quot;);

				if ($dp2)
				{
					while (($file2 = readdir($dp2)) !== false)
					{
						if (preg_match('#\.(?:gif|jpg|png)$#', $file2))
						{
							$imagesetlist['lang'][] = &quot;$imgnamelang/$file2&quot;;
						}
					}
					closedir($dp2);
				}
			}
			closedir($dp);
		}

		// Generate list of image options
		$img_options = '';
		foreach ($this-&gt;imageset_keys as $category =&gt; $img_ary)
		{
			$template-&gt;assign_block_vars('category', array(
				'NAME'			=&gt; $user-&gt;lang['IMG_CAT_' . strtoupper($category)]
			));

			foreach ($img_ary as $img)
			{
				if ($category == 'buttons')
				{
					foreach ($langs as $language)
					{
						$template-&gt;assign_block_vars('category.images', array(
							'SELECTED'			=&gt; ($img == $imgname &amp;&amp; $language == $imgnamelang),
							'VALUE'				=&gt; $img . '-' . $language,
							'TEXT'				=&gt; $user-&gt;lang['IMG_' . strtoupper($img)] . ' [ ' . $language . ' ]'
						));
					}
				}
				else
				{
					$template-&gt;assign_block_vars('category.images', array(
						'SELECTED'			=&gt; ($img == $imgname),
						'VALUE'				=&gt; $img,
						'TEXT'				=&gt; (($category == 'custom') ? $img : $user-&gt;lang['IMG_' . strtoupper($img)])
					));
				}
			}
		}

		// Make sure the list of possible images is sorted alphabetically
		sort($imagesetlist['lang']);
		sort($imagesetlist['nolang']);

		$image_found = false;
		$img_val = '';
		foreach ($imagesetlist as $type =&gt; $img_ary)
		{
			if ($type !== 'lang' || $sql_extra)
			{
				$template-&gt;assign_block_vars('imagesetlist', array(
					'TYPE'	=&gt; ($type == 'lang')
				));
			}

			foreach ($img_ary as $img)
			{
				$imgtext = preg_replace('/^([^\/]+\/)/', '', $img);
				$selected = (!empty($imgname) &amp;&amp; strpos($image_filename, $imgtext) !== false);
				if ($selected)
				{
					$image_found = true;
					$img_val = htmlspecialchars($img);
				}
				$template-&gt;assign_block_vars('imagesetlist.images', array(
					'SELECTED'			=&gt; $selected,
					'TEXT'				=&gt; $imgtext,
					'VALUE'				=&gt; htmlspecialchars($img)
				));
			}
		}

		$imgsize_bool = (!empty($imgname) &amp;&amp; $image_width &amp;&amp; $image_height) ? true : false;
		$image_request = '../styles/' . $imageset_path . '/imageset/' . ($image_lang ? $imgnamelang . '/' : '') . $image_filename;

		$template-&gt;assign_vars(array(
			'S_EDIT_IMAGESET'	=&gt; true,
			'L_TITLE'			=&gt; $user-&gt;lang[$this-&gt;page_title],
			'L_EXPLAIN'			=&gt; $user-&gt;lang[$this-&gt;page_title . '_EXPLAIN'],
			'IMAGE_OPTIONS'		=&gt; $img_options,
			'IMAGE_SIZE'		=&gt; $image_width,
			'IMAGE_HEIGHT'		=&gt; $image_height,
			'IMAGE_REQUEST'		=&gt; (empty($image_filename)) ? 'images/no_image.png' : $image_request,
			'U_ACTION'			=&gt; $this-&gt;u_action . &quot;&amp;amp;action=edit&amp;amp;id=$imageset_id&quot;,
			'U_BACK'			=&gt; $this-&gt;u_action,
			'NAME'				=&gt; $imageset_name,
			'A_NAME'			=&gt; addslashes($imageset_name),
			'PATH'				=&gt; $imageset_path,
			'A_PATH'			=&gt; addslashes($imageset_path),
			'ERROR'				=&gt; !$valid_name,
			'IMG_SRC'			=&gt; ($image_found) ? '../styles/' . $imageset_path . '/imageset/' . $img_val : 'images/no_image.png',
			'IMAGE_SELECT'		=&gt; $image_found
		));]]></find>
				<action type="replace-with"/>
			</edit>
			<edit>
				<find><![CDATA[		);
	}

	/**
	* Export style or style elements
	*/
	function export($mode, $style_id)
	{
		global $db, $template, $user, $phpbb_root_path, $cache, $phpEx, $config;

		$update = (isset($_POST['update'])) ? true : false;

		$inc_template = request_var('inc_template', 0);
		$inc_theme = request_var('inc_theme', 0);
		$inc_imageset = request_var('inc_imageset', 0);
		$store = request_var('store', 0);
		$format = request_var('format', '');

		$error = array();
		$methods = array('tar');

		$available_methods = array('tar.gz' =&gt; 'zlib', 'tar.bz2' =&gt; 'bz2', 'zip' =&gt; 'zlib');
		foreach ($available_methods as $type =&gt; $module)
		{
			if (!@extension_loaded($module))
			{
				continue;
			}

			$methods[] = $type;
		}

		if (!in_array($format, $methods))
		{
			$format = 'tar';
		}

		switch ($mode)
		{
			case 'style':
				if ($update &amp;&amp; ($inc_template + $inc_theme + $inc_imageset) &lt; 1)
				{
					$error[] = $user-&gt;lang['STYLE_ERR_MORE_ELEMENTS'];
				}

				$name = 'style_name';

				$sql_select = 's.style_id, s.style_name, s.style_copyright';
				$sql_select .= ($inc_template) ? ', t.*' : ', t.template_name';
				$sql_select .= ($inc_theme) ? ', c.*' : ', c.theme_name';
				$sql_select .= ($inc_imageset) ? ', i.*' : ', i.imageset_name';
				$sql_from = STYLES_TABLE . ' s, ' . STYLES_TEMPLATE_TABLE . ' t, ' . STYLES_THEME_TABLE . ' c, ' . STYLES_IMAGESET_TABLE . ' i';
				$sql_where = &quot;s.style_id = $style_id AND t.template_id = s.template_id AND c.theme_id = s.theme_id AND i.imageset_id = s.imageset_id&quot;;

				$l_prefix = 'STYLE';
			break;

			case 'template':
				$name = 'template_name';

				$sql_select = '*';
				$sql_from = STYLES_TEMPLATE_TABLE;
				$sql_where = &quot;template_id = $style_id&quot;;

				$l_prefix = 'TEMPLATE';
			break;

			case 'theme':
				$name = 'theme_name';

				$sql_select = '*';
				$sql_from = STYLES_THEME_TABLE;
				$sql_where = &quot;theme_id = $style_id&quot;;

				$l_prefix = 'THEME';
			break;

			case 'imageset':
				$name = 'imageset_name';

				$sql_select = '*';
				$sql_from = STYLES_IMAGESET_TABLE;
				$sql_where = &quot;imageset_id = $style_id&quot;;

				$l_prefix = 'IMAGESET';
			break;
		}

		if ($update &amp;&amp; !sizeof($error))
		{
			$sql = &quot;SELECT $sql_select
				FROM $sql_from
				WHERE $sql_where&quot;;
			$result = $db-&gt;sql_query($sql);
			$style_row = $db-&gt;sql_fetchrow($result);
			$db-&gt;sql_freeresult($result);

			if (!$style_row)
			{
				trigger_error($user-&gt;lang['NO_' . $l_prefix] . adm_back_link($this-&gt;u_action), E_USER_WARNING);
			}

			$var_ary = array('style_id', 'style_name', 'style_copyright', 'template_id', 'template_name', 'template_path', 'template_copyright', 'template_storedb', 'template_inherits_id', 'bbcode_bitfield', 'theme_id', 'theme_name', 'theme_path', 'theme_copyright', 'theme_storedb', 'theme_mtime', 'theme_data', 'imageset_id', 'imageset_name', 'imageset_path', 'imageset_copyright');

			foreach ($var_ary as $var)
			{
				if (!isset($style_row[$var]))
				{
					$style_row[$var] = '';
				}
			}

			$files = $data = array();

			if ($mode == 'style')
			{
				$style_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['style_name'], $style_row['style_copyright'], $config['version']), $this-&gt;style_cfg);

				$style_cfg .= (!$inc_template) ? &quot;\nrequired_template = {$style_row['template_name']}&quot; : '';
				$style_cfg .= (!$inc_theme) ? &quot;\nrequired_theme = {$style_row['theme_name']}&quot; : '';
				$style_cfg .= (!$inc_imageset) ? &quot;\nrequired_imageset = {$style_row['imageset_name']}&quot; : '';

				$data[] = array(
					'src'		=&gt; $style_cfg,
					'prefix'	=&gt; 'style.cfg'
				);

				unset($style_cfg);
			}

			// Export template core code
			if ($mode == 'template' || $inc_template)
			{
				$template_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['template_name'], $style_row['template_copyright'], $config['version']), $this-&gt;template_cfg);

				$use_template_name = '';

				// Add the inherit from variable, depending on it's use...
				if ($style_row['template_inherits_id'])
				{
					// Get the template name
					$sql = 'SELECT template_name
						FROM ' . STYLES_TEMPLATE_TABLE . '
						WHERE template_id = ' . (int) $style_row['template_inherits_id'];
					$result = $db-&gt;sql_query($sql);
					$use_template_name = (string) $db-&gt;sql_fetchfield('template_name');
					$db-&gt;sql_freeresult($result);
				}

				$template_cfg .= ($use_template_name) ? &quot;\ninherit_from = $use_template_name&quot; : &quot;\n#inherit_from = &quot;;
				$template_cfg .= &quot;\n\nbbcode_bitfield = {$style_row['bbcode_bitfield']}&quot;;

				$data[] = array(
					'src'		=&gt; $template_cfg,
					'prefix'	=&gt; 'template/template.cfg'
				);

				// This is potentially nasty memory-wise ...
				if (!$style_row['template_storedb'])
				{
					$files[] = array(
						'src'		=&gt; &quot;styles/{$style_row['template_path']}/template/&quot;,
						'prefix-'	=&gt; &quot;styles/{$style_row['template_path']}/&quot;,
						'prefix+'	=&gt; false,
						'exclude'	=&gt; 'template.cfg'
					);
				}
				else
				{
					$sql = 'SELECT template_filename, template_data
						FROM ' . STYLES_TEMPLATE_DATA_TABLE . &quot;
						WHERE template_id = {$style_row['template_id']}&quot;;
					$result = $db-&gt;sql_query($sql);

					while ($row = $db-&gt;sql_fetchrow($result))
					{
						$data[] = array(
							'src' =&gt; $row['template_data'],
							'prefix' =&gt; 'template/' . $row['template_filename']
						);
					}
					$db-&gt;sql_freeresult($result);
				}
				unset($template_cfg);
			}

			// Export theme core code
			if ($mode == 'theme' || $inc_theme)
			{
				$theme_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['theme_name'], $style_row['theme_copyright'], $config['version']), $this-&gt;theme_cfg);

				// Read old cfg file
				$items = $cache-&gt;obtain_cfg_items($style_row);
				$items = $items['theme'];

				if (!isset($items['parse_css_file']))
				{
					$items['parse_css_file'] = 'off';
				}

				$theme_cfg = str_replace(array('{PARSE_CSS_FILE}'), array($items['parse_css_file']), $theme_cfg);

				$files[] = array(
					'src'		=&gt; &quot;styles/{$style_row['theme_path']}/theme/&quot;,
					'prefix-'	=&gt; &quot;styles/{$style_row['theme_path']}/&quot;,
					'prefix+'	=&gt; false,
					'exclude'	=&gt; ($style_row['theme_storedb']) ? 'stylesheet.css,theme.cfg' : 'theme.cfg'
				);

				$data[] = array(
					'src'		=&gt; $theme_cfg,
					'prefix'	=&gt; 'theme/theme.cfg'
				);

				if ($style_row['theme_storedb'])
				{
					$data[] = array(
						'src'		=&gt; $style_row['theme_data'],
						'prefix'	=&gt; 'theme/stylesheet.css'
					);
				}

				unset($items, $theme_cfg);
			}

			// Export imageset core code
			if ($mode == 'imageset' || $inc_imageset)
			{
				$imageset_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['imageset_name'], $style_row['imageset_copyright'], $config['version']), $this-&gt;imageset_cfg);

				$imageset_main = array();

				$sql = 'SELECT image_filename, image_name, image_height, image_width
					FROM ' . STYLES_IMAGESET_DATA_TABLE . &quot;
					WHERE imageset_id = $style_id
						AND image_lang = ''&quot;;
				$result = $db-&gt;sql_query($sql);
				while ($row = $db-&gt;sql_fetchrow($result))
				{
					$imageset_main[$row['image_name']] = $row['image_filename'] . ($row['image_height'] ? '*' . $row['image_height']: '') . ($row['image_width'] ? '*' . $row['image_width']: '');
				}
				$db-&gt;sql_freeresult($result);

				foreach ($this-&gt;imageset_keys as $topic =&gt; $key_array)
				{
					foreach ($key_array as $key)
					{
						if (isset($imageset_main[$key]))
						{
							$imageset_cfg .= &quot;\nimg_&quot; . $key . ' = ' . str_replace(&quot;styles/{$style_row['imageset_path']}/imageset/&quot;, '{PATH}', $imageset_main[$key]);
						}
					}
				}

				$files[] = array(
					'src'		=&gt; &quot;styles/{$style_row['imageset_path']}/imageset/&quot;,
					'prefix-'	=&gt; &quot;styles/{$style_row['imageset_path']}/&quot;,
					'prefix+'	=&gt; false,
					'exclude'	=&gt; 'imageset.cfg'
				);

				$data[] = array(
					'src'		=&gt; trim($imageset_cfg),
					'prefix'	=&gt; 'imageset/imageset.cfg'
				);

				end($data);

				$imageset_root = &quot;{$phpbb_root_path}styles/{$style_row['imageset_path']}/imageset/&quot;;

				if ($dh = @opendir($imageset_root))
				{
					while (($fname = readdir($dh)) !== false)
					{
						if ($fname[0] != '.' &amp;&amp; $fname != 'CVS' &amp;&amp; is_dir(&quot;$imageset_root$fname&quot;))
						{
							$files[key($files)]['exclude'] .= ',' . $fname . '/imageset.cfg';
						}
					}
					closedir($dh);
				}

				$imageset_lang = array();

				$sql = 'SELECT image_filename, image_name, image_height, image_width, image_lang
					FROM ' . STYLES_IMAGESET_DATA_TABLE . &quot;
					WHERE imageset_id = $style_id
						AND image_lang &lt;&gt; ''&quot;;
				$result = $db-&gt;sql_query($sql);
				while ($row = $db-&gt;sql_fetchrow($result))
				{
					$imageset_lang[$row['image_lang']][$row['image_name']] = $row['image_filename'] . ($row['image_height'] ? '*' . $row['image_height']: '') . ($row['image_width'] ? '*' . $row['image_width']: '');
				}
				$db-&gt;sql_freeresult($result);

				foreach ($imageset_lang as $lang =&gt; $imageset_localized)
				{
					$imageset_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['imageset_name'], $style_row['imageset_copyright'], $config['version']), $this-&gt;imageset_cfg);

					foreach ($this-&gt;imageset_keys as $topic =&gt; $key_array)
					{
						foreach ($key_array as $key)
						{
							if (isset($imageset_localized[$key]))
							{
								$imageset_cfg .= &quot;\nimg_&quot; . $key . ' = ' . str_replace(&quot;styles/{$style_row['imageset_path']}/imageset/&quot;, '{PATH}', $imageset_localized[$key]);
							}
						}
					}

					$data[] = array(
						'src'		=&gt; trim($imageset_cfg),
						'prefix'	=&gt; 'imageset/' . $lang . '/imageset.cfg'
					);
				}

				unset($imageset_cfg);
			}

			switch ($format)
			{
				case 'tar':
					$ext = '.tar';
					$mimetype = 'x-tar';
					$compress = 'compress_tar';
				break;

				case 'zip':
					$ext = '.zip';
					$mimetype = 'zip';
				break;

				case 'tar.gz':
					$ext = '.tar.gz';
					$mimetype = 'x-gzip';
				break;

				case 'tar.bz2':
					$ext = '.tar.bz2';
					$mimetype = 'x-bzip2';
				break;

				default:
					$error[] = $user-&gt;lang[$l_prefix . '_ERR_ARCHIVE'];
			}

			if (!sizeof($error))
			{
				include($phpbb_root_path . 'includes/functions_compress.' . $phpEx);

				if ($mode == 'style')
				{
					$path = preg_replace('#[^\w-]+#', '_', $style_row['style_name']);
				}
				else
				{
					$path = $style_row[$mode . '_path'];
				}

				if ($format == 'zip')
				{
					$compress = new compress_zip('w', $phpbb_root_path . &quot;store/$path$ext&quot;);
				}
				else
				{
					$compress = new compress_tar('w', $phpbb_root_path . &quot;store/$path$ext&quot;, $ext);
				}

				if (sizeof($files))
				{
					foreach ($files as $file_ary)
					{
						$compress-&gt;add_file($file_ary['src'], $file_ary['prefix-'], $file_ary['prefix+'], $file_ary['exclude']);
					}
				}

				if (sizeof($data))
				{
					foreach ($data as $data_ary)
					{
						$compress-&gt;add_data($data_ary['src'], $data_ary['prefix']);
					}
				}

				$compress-&gt;close();

				add_log('admin', 'LOG_' . $l_prefix . '_EXPORT', $style_row[$mode . '_name']);

				if (!$store)
				{
					$compress-&gt;download($path);
					@unlink(&quot;{$phpbb_root_path}store/$path$ext&quot;);
					exit;
				}

				trigger_error(sprintf($user-&gt;lang[$l_prefix . '_EXPORTED'], &quot;store/$path$ext&quot;) . adm_back_link($this-&gt;u_action));
			}
		}

		$sql = &quot;SELECT {$mode}_id, {$mode}_name
			FROM &quot; . (($mode == 'style') ? STYLES_TABLE : $sql_from) . &quot;
			WHERE {$mode}_id = $style_id&quot;;
		$result = $db-&gt;sql_query($sql);
		$style_row = $db-&gt;sql_fetchrow($result);
		$db-&gt;sql_freeresult($result);

		if (!$style_row)
		{
			trigger_error($user-&gt;lang['NO_' . $l_prefix] . adm_back_link($this-&gt;u_action), E_USER_WARNING);
		}

		$this-&gt;page_title = $l_prefix . '_EXPORT';

		$format_buttons = '';
		foreach ($methods as $method)
		{
			$format_buttons .= '&lt;label&gt;&lt;input type=&quot;radio&quot;' . ((!$format_buttons) ? ' id=&quot;format&quot;' : '') . ' class=&quot;radio&quot; value=&quot;' . $method . '&quot; name=&quot;format&quot;' . (($method == $format) ? ' checked=&quot;checked&quot;' : '') . ' /&gt; ' . $method . '&lt;/label&gt;';
		}

		$template-&gt;assign_vars(array(
			'S_EXPORT'		=&gt; true,
			'S_ERROR_MSG'	=&gt; (sizeof($error)) ? true : false,
			'S_STYLE'		=&gt; ($mode == 'style') ? true : false,

			'L_TITLE'		=&gt; $user-&gt;lang[$this-&gt;page_title],
			'L_EXPLAIN'		=&gt; $user-&gt;lang[$this-&gt;page_title . '_EXPLAIN'],
			'L_NAME'		=&gt; $user-&gt;lang[$l_prefix . '_NAME'],

			'U_ACTION'		=&gt; $this-&gt;u_action . '&amp;amp;action=export&amp;amp;id=' . $style_id,
			'U_BACK'		=&gt; $this-&gt;u_action,

			'ERROR_MSG'			=&gt; (sizeof($error)) ? implode('&lt;br /&gt;', $error) : '',
			'NAME'				=&gt; $style_row[$mode . '_name'],
			'FORMAT_BUTTONS'	=&gt; $format_buttons)]]></find>
				<action type="replace-with"/>
			</edit>
		</open>
		<diy-instructions lang="en"><![CDATA[Copy a full phpBB into the phpBB3-folder and than you can use this modx-file.
Delete the folder phpBB3/install, set the folders cache, phpBB3/configs, phpBB3/images/logos, phpBB3/store, phpBB3/download to CHMOD 777
Run install/index.php]]></diy-instructions>
		<diy-instructions lang="de"><![CDATA[Kopiere ein volles phpBB in den Ordner phpBB3, dann bearbeite dise Version wie hier beschrieben. Lösche den Ordner install of phpBB3.
Setze den CHMOD der Ordner cache, phpBB3/configs, phpBB3/images/logos, phpBB3/store, phpBB3/download auf 777.
Führe install/index.php aus (nicht das von phpBB3 sondern das mitgelieferte)]]></diy-instructions>
	</action-group>
</mod>
